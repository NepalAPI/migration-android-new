package com.taf.data.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.taf.data.database.dao.DbUnSynced;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_UN_SYNCED".
*/
public class DbUnSyncedDao extends AbstractDao<DbUnSynced, Long> {

    public static final String TABLENAME = "DB_UN_SYNCED";

    /**
     * Properties of entity DbUnSynced.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FavouriteStatus = new Property(1, Boolean.class, "favouriteStatus", false, "FAVOURITE_STATUS");
        public final static Property ShareCount = new Property(2, Integer.class, "shareCount", false, "SHARE_COUNT");
        public final static Property SyncedStatus = new Property(3, Boolean.class, "syncedStatus", false, "SYNCED_STATUS");
    };


    public DbUnSyncedDao(DaoConfig config) {
        super(config);
    }
    
    public DbUnSyncedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_UN_SYNCED\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FAVOURITE_STATUS\" INTEGER," + // 1: favouriteStatus
                "\"SHARE_COUNT\" INTEGER," + // 2: shareCount
                "\"SYNCED_STATUS\" INTEGER);"); // 3: syncedStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_UN_SYNCED\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbUnSynced entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean favouriteStatus = entity.getFavouriteStatus();
        if (favouriteStatus != null) {
            stmt.bindLong(2, favouriteStatus ? 1L: 0L);
        }
 
        Integer shareCount = entity.getShareCount();
        if (shareCount != null) {
            stmt.bindLong(3, shareCount);
        }
 
        Boolean syncedStatus = entity.getSyncedStatus();
        if (syncedStatus != null) {
            stmt.bindLong(4, syncedStatus ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbUnSynced readEntity(Cursor cursor, int offset) {
        DbUnSynced entity = new DbUnSynced( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // favouriteStatus
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // shareCount
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // syncedStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbUnSynced entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFavouriteStatus(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setShareCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSyncedStatus(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbUnSynced entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbUnSynced entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
